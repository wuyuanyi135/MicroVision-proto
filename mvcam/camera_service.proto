syntax = "proto3";
import "camera_definitions.proto";

package mvcam;
option go_package = "github.com/wuyuanyi135/mvprotos/mvcam";
// Message
message GetAdapterReq{}
message GetAdapterRes {
    AdapterInfo adapter = 1;
}

// Message
message GetDevicesReq {
}
message GetDevicesRes {
    repeated DeviceInfo devices = 1;
}

// Message
message OpenCameraReq {
    string id = 1;
}
message OpenCameraRes {}

// Message
message ShutdownCameraReq {}
message ShutdownCameraRes {}

// Message
message OpenedReq {}
message OpenedRes {
    bool opened = 1;
}

// Message
message CapturingReq {}
message CapturingRes {
    bool capturing = 1;
}

// Message
message ConfigureCameraReq{
    Configuration config = 1;
}
message ConfigureCameraRes {}

// Message
message GetConfigureReq{}
message GetConfigurationRes {
    Configuration config = 1;
}

// Message
message GetStatusReq {
    Status status = 1;
}
message GetStatusRes {
    Status status = 1;
}

// Message
message CaptureReq {

}
message CaptureRes {
    Frame frame = 1;
}

// Message
message StreamingReq {
    uint64 number_frames = 2;
    // size of batch in one message. set to zero or one for real-time sending (no-cache). If batch_size > number_frames, number_frames will be used as batch_size.
    uint64 batch_size = 4;
}
message FrameStream {
    repeated Frame frames = 1;
}

// Message
message WorkingStateStreamingReq {}
message WorkingStateStream{
    bool opened = 1;
    bool capturing = 2;
}

// Message
message ResetDeviceReq {}
message ResetDeviceRes {}

// Message
message ControlDeviceStateReq {
    DeviceControlAction action = 1;
}
message ControlDeviceStateRes {}

service MicroVisionCameraService {
    // Get the list of drivers
    rpc GetAdapter (GetAdapterReq) returns (GetAdapterRes) {}
    rpc GetDevices (GetDevicesReq) returns (GetDevicesRes) {}

    rpc OpenCamera(OpenCameraReq) returns (OpenCameraRes) {}
    rpc ShutdownCamera(ShutdownCameraReq) returns (ShutdownCameraRes) {}
    rpc Opened(OpenedReq) returns (OpenedRes) {}
    
    // [Require open]
    rpc Capturing(CapturingReq) returns (CapturingRes) {}
    rpc ConfigureCamera(ConfigureCameraReq) returns (ConfigureCameraRes) {}
    rpc GetConfiguration(GetConfigureReq) returns (GetConfigurationRes) {}
    rpc GetStatus(GetStatusReq) returns (GetStatusRes) {}
    rpc Capture(CaptureReq) returns (CaptureRes) {}
    // [Require open]
    // Continuous streaming the frames at the preconfigured frame rate.
    // After the given number of frames captured, the stream is finalized.
    // number_frame == 0 results in non-stopping capture. Cancel the stream to interrupt.
    rpc Streaming(StreamingReq) returns (stream FrameStream) {}

    // subscribing to the opening and capturing state.
    rpc WorkingStateStreaming (WorkingStateStreamingReq) returns (stream WorkingStateStream) {}
    // [Require open]
    rpc ResetDevice(ResetDeviceReq) returns (ResetDeviceRes) {}
    rpc ControlDeviceState(ControlDeviceStateReq) returns (ControlDeviceStateRes) {}
}
